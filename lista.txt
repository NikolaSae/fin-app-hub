// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?              @map("email_verified")
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  sessions              Session[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  createdAt             DateTime               @default(now()) @map("created_at")
  updatedAt             DateTime               @updatedAt @map("updated_at") // Last account update timestamp
  assignedComplaints    Complaint[]            @relation("AssignedComplaints")
  resolvedComplaints    Complaint[]            @relation("ResolvedComplaints")
  complaints            Complaint[]
  complaintHistory      ComplaintHistory[]
  complaintComments     ComplaintComment[]
  attachments           Attachment[]

  @@map("users")
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("verification_tokens")
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("password_reset_tokens")
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("two_factor_tokens")
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String @unique

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Enumeracije za status i prioritet reklamacije
enum ComplaintStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
  REJECTED
  CLOSED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ComplaintType {
  PRODUCT_DEFECT
  SERVICE_ISSUE
  DELIVERY_PROBLEM
  BILLING_ISSUE
  OTHER
}

// Model za reklamaciju
model Complaint {
  id          String          @id @default(cuid())
  title       String
  description String          @db.Text
  type        ComplaintType   @default(OTHER)
  status      ComplaintStatus @default(PENDING)
  priority    Priority        @default(MEDIUM)

  // Povezivanje sa korisnikom koji je napravio reklamaciju
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Povezivanje sa agentom koji obrađuje reklamaciju
  assignedToId String?
  assignedTo   User?   @relation("AssignedComplaints", fields: [assignedToId], references: [id], onDelete: SetNull)

  // Proizvod ili usluga na koji se odnosi reklamacija
  productId String?
  product   Product? @relation(fields: [productId], references: [id], onDelete: SetNull)

  // Praćenje istorije
  history ComplaintHistory[]

  // Komentari i prilozi
  comments    ComplaintComment[]
  attachments Attachment[]

  // Podaci o rešenju
  resolution   String?   @db.Text
  resolvedAt   DateTime?
  resolvedById String?
  resolvedBy   User?     @relation("ResolvedComplaints", fields: [resolvedById], references: [id], onDelete: SetNull)

  // Sistemski metapodaci
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([status])
  @@index([assignedToId])
  @@map("complaints")
}

// Model za proizvod ili uslugu
model Product {
  id          String   @id @default(cuid())
  name        String
  description String?  @db.Text
  sku         String?  @unique
  price       Decimal? @db.Decimal(10, 2)
  category    String?

  // Povezivanje sa reklamacijama
  complaints Complaint[]

  // Sistemski metapodaci
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("products")
}

// Model za istoriju reklamacija
model ComplaintHistory {
  id          String    @id @default(cuid())
  complaintId String
  complaint   Complaint @relation(fields: [complaintId], references: [id], onDelete: Cascade)

  oldStatus ComplaintStatus?
  newStatus ComplaintStatus

  description String? @db.Text

  // Ko je napravio promenu
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@index([complaintId])
  @@map("complaint_history")
}

// Model za komentare na reklamacijama
model ComplaintComment {
  id          String    @id @default(cuid())
  complaintId String
  complaint   Complaint @relation(fields: [complaintId], references: [id], onDelete: Cascade)

  content String @db.Text

  // Ko je ostavio komentar
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([complaintId])
  @@map("complaint_comments")
}

// Model za priloge (dokumenti, slike)
model Attachment {
  id          String    @id @default(cuid())
  complaintId String
  complaint   Complaint @relation(fields: [complaintId], references: [id], onDelete: Cascade)

  fileName String
  fileType String
  fileSize Int
  fileUrl  String

  // Ko je dodao prilog
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@index([complaintId])
  @@map("attachments")
}
