// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?              @map("email_verified")
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  sessions              Session[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  createdAt             DateTime               @default(now()) @map("created_at")
  updatedAt             DateTime               @updatedAt @map("updated_at")
  
  // Dodaj relacije za reklamacije
  submittedClaims       Claim[]                @relation("ClaimSubmitter")
  assignedClaims        Claim[]                @relation("ClaimHandler")
  claimNotes            ClaimNote[]
  claimActions          ClaimAction[]
  
  @@map("users")
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("verification_tokens")
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("password_reset_tokens")
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("two_factor_tokens")
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String @unique

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Claim statuses
enum ClaimStatus {
  DRAFT
  NEW
  PROCESSING
  WAITING_FOR_INFO
  RESOLVED
  REJECTED
  CLOSED
}

// Claim types
enum ClaimType {
  PRODUCT_DEFECT
  SHIPPING_DAMAGE
  WRONG_ITEM
  MISSING_ITEM
  RETURN_REFUND
  SERVICE_COMPLAINT
  WARRANTY
  OTHER
}

// Main Claim model
model Claim {
  id                String        @id @default(cuid())
  claimNumber       String        @unique // Auto-generated claim reference number
  status            ClaimStatus   @default(NEW)
  type              ClaimType
  priority          Int           @default(3) // 1-5 where 1 is highest priority
  
  // User relationships
  submitterId       String
  submitter         User          @relation("ClaimSubmitter", fields: [submitterId], references: [id])
  
  assignedToId      String?
  assignedTo        User?         @relation("ClaimHandler", fields: [assignedToId], references: [id])
  
  // Email data 
  sourceEmailId     String?       @map("source_email_id")
  sourceEmail       EmailSource?  @relation(fields: [sourceEmailId], references: [id])
  
  // Content
  subject           String
  description       String        @db.Text
  
  // Extracted and processed data
  originalData      Json?         // Raw extracted data
  processedData     Json?         // AI-processed structured data
  
  // Customer information
  customerName      String?
  customerEmail     String?
  customerPhone     String?
  customerReference String?       // External reference number
  
  // Dates
  createdAt         DateTime      @default(now()) @map("created_at")
  updatedAt         DateTime      @updatedAt @map("updated_at")
  dueDate           DateTime?     @map("due_date")
  resolvedAt        DateTime?     @map("resolved_at")
  
  // Related entities
  attachments       Attachment[]
  notes             ClaimNote[]
  actions           ClaimAction[]
  history           ClaimHistory[]
  
  @@index([submitterId])
  @@index([assignedToId])
  @@index([status])
  @@index([type])
  @@index([createdAt])
  @@map("claims")
}

// Email source data
model EmailSource {
  id              String    @id @default(cuid())
  sender          String
  recipients      String    @db.Text // JSON array of email addresses
  subject         String
  body            String    @db.Text
  receivedAt      DateTime  @map("received_at")
  rawContent      String    @db.Text // Original email content
  threadId        String?   @map("thread_id") // For tracking email conversations
  
  // Email metadata
  headers         Json?
  
  // Relationships
  claims          Claim[]
  attachments     Attachment[]
  
  createdAt       DateTime  @default(now()) @map("created_at")
  
  @@index([sender])
  @@index([threadId])
  @@index([receivedAt])
  @@map("email_sources")
}

// Attachments (for both emails and claims)
model Attachment {
  id              String    @id @default(cuid())
  fileName        String    @map("file_name")
  fileType        String    @map("file_type")
  fileSize        Int       @map("file_size")
  path            String    // Storage path
  contentType     String    @map("content_type")
  
  // Relations - an attachment can belong to a claim, email, or both
  claimId         String?
  claim           Claim?    @relation(fields: [claimId], references: [id], onDelete: Cascade)
  
  emailSourceId   String?   @map("email_source_id")
  emailSource     EmailSource? @relation(fields: [emailSourceId], references: [id], onDelete: Cascade)
  
  createdAt       DateTime  @default(now()) @map("created_at")
  
  @@index([claimId])
  @@index([emailSourceId])
  @@map("attachments")
}

// Notes added to claims
model ClaimNote {
  id              String    @id @default(cuid())
  claimId         String
  claim           Claim     @relation(fields: [claimId], references: [id], onDelete: Cascade)
  
  authorId        String
  author          User      @relation(fields: [authorId], references: [id])
  
  content         String    @db.Text
  isInternal      Boolean   @default(true) @map("is_internal") // Whether visible to customer
  
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  
  @@index([claimId])
  @@index([authorId])
  @@map("claim_notes")
}

// Action types
enum ClaimActionType {
  STATUS_CHANGE
  ASSIGNMENT
  CUSTOMER_REPLY
  INTERNAL_COMMENT
  ATTACHMENT_ADDED
  AI_PROCESSING
  MANUAL_UPDATE
}

// Actions performed on claims
model ClaimAction {
  id              String          @id @default(cuid())
  claimId         String
  claim           Claim           @relation(fields: [claimId], references: [id], onDelete: Cascade)
  
  userId          String
  user            User            @relation(fields: [userId], references: [id])
  
  actionType      ClaimActionType
  description     String          @db.Text
  metadata        Json?           // Additional data about the action
  
  createdAt       DateTime        @default(now()) @map("created_at")
  
  @@index([claimId])
  @@index([userId])
  @@index([actionType])
  @@map("claim_actions")
}

// History of claim changes (audit trail)
model ClaimHistory {
  id              String    @id @default(cuid())
  claimId         String
  claim           Claim     @relation(fields: [claimId], references: [id], onDelete: Cascade)
  
  field           String    // Field that changed
  oldValue        String?   @db.Text
  newValue        String?   @db.Text
  
  changedAt       DateTime  @default(now()) @map("changed_at")
  changedBy       String    @map("changed_by") // User ID
  
  @@index([claimId])
  @@index([changedAt])
  @@map("claim_history")
}

// AI processing records
model AIProcessingLog {
  id              String    @id @default(cuid())
  claimId         String
  
  promptUsed      String    @db.Text @map("prompt_used")
  aiResponse      String    @db.Text @map("ai_response")
  processingTime  Int       @map("processing_time") // In milliseconds
  success         Boolean   @default(true)
  errorMessage    String?   @db.Text @map("error_message")
  
  createdAt       DateTime  @default(now()) @map("created_at")
  
  @@index([claimId])
  @@map("ai_processing_logs")
}

// Template for AI prompts based on claim type
model AIPromptTemplate {
  id              String    @id @default(cuid())
  claimType       ClaimType @unique
  promptTemplate  String    @db.Text @map("prompt_template")
  
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  
  @@map("ai_prompt_templates")
}